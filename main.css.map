{"version":3,"sources":["webpack:///./src/app/components/Cell.svelte","webpack:///./src/app/components/Grid.svelte","webpack:///./src/app/components/Solver.svelte","webpack:///./src/app/components/App.svelte"],"names":[],"mappings":"AAUE,gBAAG,gBACgB,CAClB,qBAEM,UACM,CACX,WAAY,CACZ,YAAa,CACb,kBAAmB,CACnB,sBAAuB,CACvB,iBAAkB,CACnB,sBAEO,sBACiB,CACxB,uBAEQ,iBACW,CAClB,KAAM,CACN,MAAO,CACP,aAAc;AA9BlB,y7CAAy7C,C;AC6Bv7C,oCAAO,wBACoB,CAC1B,iCAEG,SACQ,CACV,UAAW,CACX,6BAA8B,CAC9B,4BAA6B,CAC9B,+CAEiB,2BACY,CAC7B,kDAEoB,0BACQ;AA7C/B,ygEAAygE,C;ACuCvgE,yBAAW,aACK,CACd,WAAY;AAzChB,qxDAAqxD,C;ACanxD,qBAAO,aACS,CACd,WAAY;AAfhB,60BAA60B,C","file":"main.css","sourcesContent":["<script lang=\"ts\">;\nexport let cell;\n</script>\n\n<div class=\"cell\" class:block={!cell} on:mousedown>\n  <div class=\"number\">{cell?.number ?? \"\"}</div>\n  <div class=\"value\">{cell?.value ?? \"\"}</div>\n</div>\n\n<style>\n  * {\n    user-select: none;\n  }\n\n  .cell {\n    width: 100%;\n    height: 100%;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    position: relative;\n  }\n\n  .block {\n    background-color: black;\n  }\n\n  .number {\n    position: absolute;\n    top: 0;\n    left: 0;\n    font-size: 75%;\n  }\n</style>\n","<script lang=\"ts\">import range from \"lodash/range\";\nimport { Crossword } from \"../crossword\";\nimport Cell from \"./Cell.svelte\";\nexport let crossword = new Crossword(5, 5);\nexport let editable = false;\nfunction toggleCell(row, col) {\n    crossword.toggleCell(row, col);\n    crossword = crossword;\n}\n</script>\n\n<table>\n  {#each range(0, crossword.rows) as r}\n    <tr>\n      {#each range(0, crossword.cols) as c}\n        <td\n          on:mousedown={() => {\n            if (editable) {\n              toggleCell(r, c);\n            }\n          }}\n        >\n          <Cell cell={crossword.cells[r][c]} />\n        </td>\n      {/each}\n    </tr>\n  {/each}\n</table>\n\n<style>\n  table {\n    border-collapse: collapse;\n  }\n\n  td {\n    width: 2em;\n    height: 2em;\n    border-bottom: solid black 1px;\n    border-right: solid black 1px;\n  }\n\n  td:first-of-type {\n    border-left: solid black 1px;\n  }\n\n  tr:first-of-type td {\n    border-top: solid black 1px;\n  }\n</style>\n","<script lang=\"ts\">;\nimport { MsgKind, ReturnMsg, WorkerMsg } from \"../types\";\nimport Grid from \"./Grid.svelte\";\nexport let input;\nlet worker = new Worker(\"./worker.js\");\nconst send = (msg) => {\n    worker.postMessage(msg);\n};\nsend({ msgKind: MsgKind.RESET });\nlet found = new Array();\nworker.addEventListener(\"message\", ({ data: msg }) => {\n    switch (msg.msgKind) {\n        case MsgKind.SOLUTION_FOUND: {\n            found.push(input.applySolution(msg.solution));\n            found = found;\n            break;\n        }\n    }\n});\nconst solve = () => {\n    send({ msgKind: MsgKind.RESET });\n    console.log(\"appending entries\");\n    for (const entry of input.allEntries()) {\n        send({ msgKind: MsgKind.ADD_ENTRY, entry });\n    }\n    console.log(\"begin search\");\n    send({ msgKind: MsgKind.BEGIN_SEARCH });\n};\n</script>\n\n<div>\n  <button on:click={solve}>Solve</button>\n  {#each found as solution}\n    <div class=\"solution\">\n      <Grid crossword={solution} />\n    </div>\n  {/each}\n</div>\n\n<style>\n  .solution {\n    font-size: 75%;\n    padding: 1em;\n  }\n</style>\n","<script lang=\"ts\">import { Crossword } from \"../crossword\";\nimport Grid from \"./Grid.svelte\";\nimport Solver from \"./Solver.svelte\";\nlet crossword = new Crossword(7, 7);\n</script>\n\n<main>\n  <div class=\"wrap\">\n    <Grid bind:crossword editable={true} />\n    <Solver input={crossword} />\n  </div>\n</main>\n\n<style>\n  .wrap {\n    margin: 0 auto;\n    width: 600px;\n  }\n</style>\n"],"sourceRoot":""}